{"version":3,"sources":["components/core/controller/Action.ts"],"names":["PipelineCallbackResult","PipelineCallbackResult.constructor","PipelineCallbackResult.context","Action","Action.constructor","Action.context","Action.next","Action.reject","Action.execute"],"mappings":"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","file":"components/core/controller/Action.js","sourcesContent":["import { DecoratorEvent } from './ControllerBuilder';\nimport {\n    ActionDecorator,\n    DecoratorsObject,\n    DecoratedController\n} from '../interfaces/Core';\n\nclass PipelineCallbackResult {\n    constructor(\n        public key: string,\n        public next: Function,\n        public reject: Function,\n        public result: any,\n        public instance: any\n    ) {\n        //\n    }\n\n    get context(): DecoratedController {\n        return this.instance();\n    }\n}\n\nexport class Action {\n\n    result: any = void 0;\n    event: DecoratorEvent = DecoratorEvent.Before;\n    instance: DecoratedController = void 0;\n    index: number = 0;\n\n    constructor(public action: DecoratorsObject,\n                public key: string,\n                public target: DecoratedController) {\n    }\n\n    /**\n     * Create and return context for current pipeline\n     */\n    private context(): DecoratedController {\n        if (!this.instance) {\n            this.instance = new this.target();\n        }\n\n        return this.instance;\n    }\n\n    /**\n     * Execute next pipe if exists otherwise execute action method\n     */\n    private next(event, index): void {\n        if (event == DecoratorEvent.After && index === 0) {\n            // execute action method\n            this.result = this.context()[this.key]();\n        }\n\n        if (this.action[event][index]) {\n            // set arguments to pass to decorator callback\n            this.action[event][index](new PipelineCallbackResult(\n                this.key,\n                () => this.next(event, index + 1),\n                () => this.reject(),\n                this.result,\n                () => this.context()\n            ));\n        }\n        else if (event === DecoratorEvent.Before) {\n            this.next(DecoratorEvent.After, 0);\n        }\n        else if (event === DecoratorEvent.After) {\n            this.instance = void 0;\n            this.result = void 0;\n        }\n    }\n\n    /**\n     * Reject pipeline execution\n     */\n    private reject(): void {\n        // reject\n    }\n\n    /**\n     * Execute current pipeline\n     */\n    public execute(): void {\n        this.next(DecoratorEvent.Before, 0);\n    }\n}\n"],"sourceRoot":"/source/"}