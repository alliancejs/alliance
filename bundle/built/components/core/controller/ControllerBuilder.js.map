{"version":3,"sources":["components/core/controller/ControllerBuilder.ts"],"names":["DecoratorEvent","ControllerBuilder","ControllerBuilder.constructor","ControllerBuilder.build","ControllerBuilder.registerActionDecorator","ControllerBuilder.registerControllerDecorator"],"mappings":"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","file":"components/core/controller/ControllerBuilder.js","sourcesContent":["/**\n * Alliance : TypeScript framework for NodeJS (http://alliancejs.com)\n * Copyright (c) Eugene Pisotsky (http://alliancejs.com)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Eugene Pisotsky (http://alliancejs.com)\n * @link          http://alliancejs.com Alliance Project\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\n\nimport 'reflect-metadata';\nimport * as express  from 'express';\nimport * as http  from 'http';\nimport * as colors from 'colors';\nimport * as fs from 'fs';\nimport * as Exphbs from 'express-handlebars';\nimport * as path from 'path';\nimport { Action } from './Action';\nimport {\n    ActionDecorator,\n    ActionDefinition,\n    ActionOptions,\n    DecoratorsObject,\n    DecoratedController\n} from '../interfaces/Core';\n\nexport enum DecoratorEvent { Before, After }\n\nexport class ControllerBuilder {\n\n    actionDecorators: WeakMap<DecoratedController, Map<string, DecoratorsObject>> = new WeakMap();\n    controllerDecorators: WeakMap<DecoratedController, DecoratorsObject> = new WeakMap();\n\n    /**\n     * Each controller is a pipeline which sequentially executes every decorator\n     * and can create just a single instance of controller class\n     */\n    public build(target: DecoratedController): void {\n\n        for (let [key, pipes] of this.actionDecorators.get(target).entries()) {\n            // merge action and controller pipes\n            if (this.controllerDecorators.has(target)) {\n                pipes = {\n\n                    [DecoratorEvent.Before]: this.controllerDecorators.get(target)[DecoratorEvent.Before]\n                                                                      .concat(pipes[DecoratorEvent.Before]),\n\n                    [DecoratorEvent.After]: this.controllerDecorators.get(target)[DecoratorEvent.After]\n                                                                     .concat(pipes[DecoratorEvent.After])\n\n                };\n            }\n\n            // create and execute pipeline\n            let pipeline = new Action(pipes, key, target);\n            pipeline.execute();\n        }\n\n    }\n\n    /**\n     * Register action decorator\n     *\n     * This method will define new pipe for controller\n     */\n    public registerActionDecorator(target: any, key: any, decoratorFunc: Function, afterFunc?: Function): void {\n        target = target.constructor;\n\n        if (!this.actionDecorators.has(target)) {\n            this.actionDecorators.set(target, new Map());\n        }\n\n        if (!this.actionDecorators.get(target).has(key)) {\n            this.actionDecorators.get(target).set(key, {\n                [DecoratorEvent.Before]: [],\n                [DecoratorEvent.After]: []\n            });\n        }\n\n        this.actionDecorators.get(target).get(key)[DecoratorEvent.Before].unshift(decoratorFunc);\n        if (afterFunc) {\n            this.actionDecorators.get(target).get(key)[DecoratorEvent.After].unshift(afterFunc);\n        }\n    }\n\n    /**\n     * Register controller decorator\n     *\n     * This function would be executed before each pipeline of decorated controller\n     */\n    public registerControllerDecorator(target: any, decoratorFunc: Function, afterFunc?: Function): void {\n        if (!this.controllerDecorators.has(target)) {\n            this.controllerDecorators.set(target, {\n                [DecoratorEvent.Before]: [],\n                [DecoratorEvent.After]: []\n            });\n        }\n\n        this.controllerDecorators.get(target)[DecoratorEvent.Before].unshift(decoratorFunc);\n        if (afterFunc) {\n            this.controllerDecorators.get(target)[DecoratorEvent.After].unshift(afterFunc);\n        }\n    }\n}\n"],"sourceRoot":"/source/"}