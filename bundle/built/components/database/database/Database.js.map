{"version":3,"sources":["components/database/database/database.ts"],"names":["RelationshipType","Database","Database.constructor","Database.registerModel","Database.getModel","Database.registerTable","Database.addRelationships","Database.registerColumn","Database.registerRelationship"],"mappings":"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","file":"components/database/database/database.js","sourcesContent":["/**\n * Alliance : TypeScript framework for NodeJS (http://alliancejs.com)\n * Copyright (c) Eugene Pisotsky (http://alliancejs.com)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Eugene Pisotsky (http://alliancejs.com)\n * @link          http://alliancejs.com Alliance Project\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\n\nimport 'reflect-metadata';\nimport config, { AppConfigDatasource } from 'alliance/config';\nimport * as path  from 'path';\nimport * as Sequelize  from 'sequelize';\nimport { Logger } from '../../core/debug/logger';\nimport { Table } from './table';\n\nimport {\n    Datasource,\n    DecoratedTable,\n    TableOptions,\n    ColumnInterface,\n    RelationshipInterface\n} from '../interfaces/core';\n\nexport enum RelationshipType {\n    hasMany,\n    hasOne,\n    belongsTo,\n    belongsToMany\n}\n\nexport class Database {\n    sequelize: Sequelize.Sequelize;\n    datasource: AppConfigDatasource;\n\n    models: WeakMap<DecoratedTable, any> = new WeakMap();\n    columns: WeakMap<DecoratedTable, Sequelize.DefineAttributes> = new WeakMap();\n    relationships: WeakMap<DecoratedTable, Set<RelationshipInterface>> = new WeakMap();\n    relationshipMethods: string[] = [ 'hasMany', 'hasOne', 'belongsTo', 'belongsToMany' ];\n\n    DAO: WeakMap<any, any> = new WeakMap();\n\n    /**\n     * Initialize database connection if it`s configured\n     */\n    constructor() {\n        this.datasource = config.datasources.default;\n\n        if (this.datasource.dialect !== void 0) {\n\n            // Create database connection\n            this.sequelize = new Sequelize(this.datasource.database, this.datasource.username, this.datasource.password, this.datasource);\n\n        }\n\n        return this;\n    }\n\n    /**\n     * Register model\n     */\n    public registerModel(target: any, table: any): void {\n        this.DAO.set(target, {\n            schema: table,\n            model: this.models.get(table)\n        });\n    }\n\n    /**\n     * Get model by target class\n     */\n    public getModel(target: any): any {\n        return this.DAO.get(target.constructor);\n    }\n\n    /**\n     * Register table schema\n     */\n    public registerTable(target: DecoratedTable, options: TableOptions): void {\n        this.models.set(\n            target,\n            this.sequelize.define(options.name, this.columns.get(target), {\n                // default options\n            })\n        );\n\n        this.addRelationships(target);\n\n        // sync models in debug mode\n        if (allianceTaskOptions.debug) { this.sequelize.sync() }\n    }\n\n    /**\n     * Add relationships to sequelize model\n     */\n    public addRelationships(target: any): void {\n        let includes: any[] = [];\n\n        if (this.relationships.has(target)) {\n\n            // iterate over model relationships\n            for (const rel of this.relationships.get(target)) {\n                this.models.get(target)[ this.relationshipMethods[rel.type] ](this.models.get(rel.target), rel.options)\n\n                includes.push(\n                    this.models.get(rel.target)\n                );\n            }\n\n            this.models.get(target).addScope('defaultScope', {\n                include: includes\n            }, {\n                override: true\n            });\n\n        }\n    }\n\n    /**\n     * Register column for the model\n     */\n    public registerColumn(type: any, target: any, key: string): void {\n        let value: Sequelize.DefineAttributes = {\n            [key]: {\n                type: type\n            }\n        };\n\n        this.columns.set(\n            target,\n            this.columns.has(target) ? Object.assign(this.columns.get(target), value) : value\n        );\n    }\n\n    /**\n     * Register relationship\n     */\n    public registerRelationship(target: any, key: string, type: RelationshipType, options: any): void {\n        let relationship: RelationshipInterface = {\n            target: Reflect.getMetadata(\"design:type\", target, key),\n            options: options,\n            type: type\n        };\n\n        target = target.constructor;\n\n        this.relationships.set(\n            target,\n            this.relationships.has(target) ? this.relationships.get(target).add(relationship) : new Set([ relationship ])\n        );\n    }\n\n}\n\nexport const database: Database = new Database();\n"],"sourceRoot":"/source/"}