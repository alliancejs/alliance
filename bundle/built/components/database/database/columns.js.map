{"version":3,"sources":["components/database/database/columns.ts"],"names":["decorateColumn"],"mappings":";;;;AAAA,IAAY,SAAS,GAAA,OAAA,CAAO,WAAW,CAAC,CAAA;AACxC,IAAA,UAAA,GAAA,OAAA,CAAmC,YAAY,CAAC,CAAA;AA8MhD,IAAI,IAAI,GAA2C,CAC/C,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAC5B,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,EAC9B,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,EAC9B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAC5B,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,EAC1B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAC5B,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,EAC9B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,EAChC,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAC5B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,EAC1B,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,EACtB,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,EAC1B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAC5B,CAAC,SAAS,EAAE,SAAS,CAAC,OAAO,CAAC,EAC9B,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,EACxB,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,EAC1B,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,CACnC,CAAA;AAEU,OAAA,CAAA,MAAM,GAAwC,EAAE,CAAC;;;;;;;;;YAElD,GAAG;YAAE,KAAK;;AAChB,eAAA,CAAA,MAAM,CAAC,GAAG,CAAC,GAAG;+CAAI,MAAM;AAAN,sBAAM;;;mBAAU,cAAc,mBAAC,KAAK,SAAK,MAAM,EAAC;SAAA,CAAC;;;AADvE,yBAAyB,IAAI,8HAAE;;KAE9B;;;;;;;;;;;;;;;;AAED,SAAA,cAAA,CAAwB,IAAS,EAAW;sCAAN,MAAM;AAAN,cAAM;;;AACxCA,QAAIA,MAAMA,CAACA,CAACA,CAACA,YAAYA,MAAMA,IAAIA,MAAMA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,IAAIA,KAAKA,QAAQA,EAAEA;AACxEA,kBAAAA,CAAAA,QAAQA,CAACA,cAAcA,CAACA,IAAIA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;KACnEA,MAAMA;AACHA,eAAOA,UAACA,MAAMA,EAAEA,GAAGA,EAAAA;AACfA,sBAAAA,CAAAA,QAAQA,CAACA,cAAcA,CAACA,IAAIA,kBAAIA,MAAMA,CAACA,EAAEA,MAAMA,CAACA,WAAWA,EAAEA,GAAGA,CAACA,CAACA;SACrEA,CAAAA;KACJA;CACJA","file":"components/database/database/columns.js","sourcesContent":["import * as sequelize  from 'sequelize';\nimport { Database, database } from './database';\n\nexport interface DataTypeAbstract {\n    /**\n     * Although this is not needed for the definitions itself, we want to make sure that DataTypeAbstract is not\n     * something than can be evaluated to an empty object.\n     */\n    dialectTypes : string;\n}\n\nexport interface DataTypeAbstractString<T> extends DataTypeAbstract {\n    /**\n     * A variable length string. Default length 255\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number } ) : T;\n    ( length : number ) : T;\n\n    /**\n     * Property BINARY for the type\n     */\n    BINARY : T;\n}\n\nexport interface DataTypeString extends DataTypeAbstractString<any> { }\nexport interface DataTypeChar extends DataTypeAbstractString<any> { }\nexport interface DataTypeText extends DataTypeAbstract {\n    /**\n     * Length of the text field.\n     *\n     * Available lengths: `tiny`, `medium`, `long`\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: string } ) : any;\n    ( length : string ) : any;\n}\n\nexport interface DataTypeAbstractNumber<T> extends DataTypeAbstract {\n    UNSIGNED : T;\n    ZEROFILL : T;\n}\n\nexport interface DataTypeNumber extends DataTypeAbstractNumber<any> { }\n\nexport interface DataTypeInteger extends DataTypeAbstractNumber<any> {\n    /**\n     * Length of the number field.\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number } ) : any;\n    ( length : number ) : any;\n}\n\nexport interface DataTypeBigInt extends DataTypeAbstractNumber<any> {\n    /**\n     * Length of the number field.\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number } ) : any;\n    ( length : number ) : any;\n}\n\nexport interface DataTypeFloat extends DataTypeAbstractNumber<any> {\n    /**\n     * Length of the number field and decimals of the float\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number, decimals?: number } ) : any;\n    ( length : number, decimals? : number ) : any;\n}\n\nexport interface DataTypeReal extends DataTypeAbstractNumber<any> {\n    /**\n     * Length of the number field and decimals of the real\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number, decimals?: number } ) : any;\n    ( length : number, decimals? : number ) : any;\n}\n\nexport interface DataTypeDouble extends DataTypeAbstractNumber<any> {\n    /**\n     * Length of the number field and decimals of the real\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: number, decimals?: number } ) : any;\n    ( length : number, decimals? : number ) : any;\n}\n\nexport interface DataTypeDecimal extends DataTypeAbstractNumber<any> {\n    /**\n     * Precision and scale for the decimal number\n     */\n    ( target: any, key: string ): any;\n    ( options? : { precision: number, scale?: number } ) : any;\n    ( precision : number, scale? : number ) : any;\n}\n\nexport interface DataTypeBoolean extends DataTypeAbstract { }\nexport interface DataTypeTime extends DataTypeAbstract { }\nexport interface DataTypeDate extends DataTypeAbstract { }\nexport interface DataTypeDateOnly extends DataTypeAbstract { }\nexport interface DataTypeHStore extends DataTypeAbstract { }\nexport interface DataTypeJSONType extends DataTypeAbstract { }\nexport interface DataTypeJSONB extends DataTypeAbstract { }\nexport interface DataTypeNow extends DataTypeAbstract { }\nexport interface DataTypeBlob extends DataTypeAbstract {\n    /**\n     * Length of the blob field.\n     *\n     * Available lengths: `tiny`, `medium`, `long`\n     */\n    ( target: any, key: string ): any;\n    ( options? : { length: string } ) : any;\n    ( length : string ) : any;\n}\n\nexport interface DataTypeRange extends DataTypeAbstract {\n    /**\n     * Range field for Postgre\n     *\n     * Accepts subtype any of the ranges\n     */\n    ( target: any, key: string ): any;\n    ( options? : { subtype: DataTypeAbstract } ) : any;\n    ( subtype : DataTypeAbstract ) : any;\n}\n\nexport interface DataTypeUUID extends DataTypeAbstract { }\nexport interface DataTypeUUIDv1 extends DataTypeAbstract { }\nexport interface DataTypeUUIDv4 extends DataTypeAbstract { }\nexport interface DataTypeVirtual extends DataTypeAbstract { }\nexport interface DataTypeEnum extends DataTypeAbstract {\n    /**\n     * Enum field\n     *\n     * Accepts values\n     */\n    ( target: any, key: string ): any;\n    ( options? : { values: string | string[] } ) : any;\n    ( values : string | string[] ) : any;\n    ( ...args : string[] ) : any;\n}\n\nexport interface DataTypeArray extends DataTypeAbstract {\n    /**\n     * Array field for Postgre\n     *\n     * Accepts type any of the DataTypes\n     */\n    ( target: any, key: string ): any;\n    ( options : { type: DataTypeAbstract } ) : any;\n    ( type : DataTypeAbstract ) : any;\n}\n\nexport interface DataTypeGeometry extends DataTypeAbstract {\n    /**\n     * Geometry field for Postgres\n     */\n    ( target: any, key: string ): any;\n    ( type : string, srid? : number ) : any;\n}\n\nexport interface ColumnsInterface {\n    string: DataTypeString;\n    integer: DataTypeInteger;\n    boolean: DataTypeInteger;\n    char: DataTypeChar;\n    text: DataTypeText;\n    bigint: DataTypeBigInt;\n    float: DataTypeFloat;\n    real: DataTypeReal;\n    double: DataTypeDouble;\n    decimal: DataTypeDecimal;\n    time: DataTypeTime;\n    date: DataTypeDate;\n    dateonly: DataTypeDateOnly;\n    hstore: DataTypeHStore;\n    json: DataTypeJSONType;\n    jsonb: DataTypeJSONB;\n    now: DataTypeNow;\n    blob: DataTypeBlob;\n    range: DataTypeRange;\n    uuid: DataTypeUUID;\n    uuidv4: DataTypeUUIDv4;\n    virtual: DataTypeVirtual;\n    enum: DataTypeEnum;\n    array: DataTypeArray;\n    geometry: DataTypeGeometry;\n}\n\nexport interface ColumnOptions {\n    type: string | DataTypeAbstract;\n    unique?: boolean | string | { name: string, msg: string };\n    primaryKey?: boolean;\n    autoIncrement?: boolean;\n    comment?: string;\n    references? : sequelize.DefineAttributeColumnReferencesOptions;\n    onUpdate? : string;\n    onDelete? : string;\n    get? : () => any;\n    set? : ( val : any ) => void;\n    validate? : sequelize.DefineValidateOptions;\n    values? : Array<string>;\n}\n\nlet cols: [string, sequelize.DataTypeAbstract][] = [\n    ['string', sequelize.STRING],\n    ['integer', sequelize.INTEGER],\n    ['boolean', sequelize.BOOLEAN],\n    ['char', sequelize.CHAR],\n    ['text', sequelize.TEXT],\n    ['bigint', sequelize.BIGINT],\n    ['float', sequelize.FLOAT],\n    ['real', sequelize.REAL],\n    ['double', sequelize.DOUBLE],\n    ['decimal', sequelize.DECIMAL],\n    ['time', sequelize.TIME],\n    ['date', sequelize.DATE],\n    ['dateonly', sequelize.DATEONLY],\n    ['hstore', sequelize.HSTORE],\n    ['json', sequelize.JSON],\n    ['jsonb', sequelize.JSONB],\n    ['now', sequelize.NOW],\n    ['blob', sequelize.BLOB],\n    ['range', sequelize.RANGE],\n    ['uuid', sequelize.UUID],\n    ['uuidv4', sequelize.UUIDV4],\n    ['virtual', sequelize.VIRTUAL],\n    ['enum', sequelize.ENUM],\n    ['array', sequelize.ARRAY],\n    ['geometry', sequelize.GEOMETRY]\n]\n\nexport let Column: ColumnsInterface = <ColumnsInterface> {};\n\nfor (let [key, value] of cols) {\n    Column[key] = (...params): any => decorateColumn(value, ...params);\n}\n\nfunction decorateColumn(type: any, ...params): any {\n    if (params[0] instanceof Object && params[0].constructor.name !== 'Object') {\n        database.registerColumn(type, params[0].constructor, params[1]);\n    } else {\n        return (target, key) => {\n            database.registerColumn(type(...params), target.constructor, key);\n        }\n    }\n}\n"],"sourceRoot":"/source/"}