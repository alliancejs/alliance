{"version":3,"sources":["decorators/core/Route.ts"],"names":["RouteType","ActionDecorator","ActionDecorator.constructor","ControllerDecorator","ControllerDecorator.constructor","Route"],"mappings":"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","file":"decorators/core/Route.js","sourcesContent":["import { DecoratorCallback } from 'alliance/core';\nimport { controllerBuilder, server } from '../../components/Bundle';\nimport { Router } from '../../components/core/routing/Router';\n\nexport enum RouteType { Action, Controller }\n\nexport class ActionDecorator {\n    constructor(target, key, before: Function, after?: Function) {\n        controllerBuilder.registerActionDecorator(target, key, before, after);\n        return () => void 0;\n    }\n}\n\nexport class ControllerDecorator {\n    constructor(target, before: Function, after?: Function) {\n        controllerBuilder.registerControllerDecorator(target, before, after);\n        return () => void 0;\n    }\n}\n\nexport function Route(path: string, options?: Object) {\n    let actionClass: Router;\n    let actionPath: string = path;\n\n    let callbacks: { before: (type) => DecoratorCallback, after: DecoratorCallback } = {\n            before: type =>\n                    pipe => {\n\n                if (type === RouteType.Action) {\n                    if (pipe.context.meta._routeBasePath) {\n                        actionPath = pipe.context.meta._routeBasePath + actionPath;\n                    }\n\n                    server.express.all(actionPath, (req, res, expressNext) => {\n                        actionClass = new Router(pipe.context, pipe.key, req, res, expressNext);\n                        pipe.next();\n                    });\n                } else {\n                    pipe.context.meta._routeBasePath = path;\n                    pipe.next();\n                }\n\n            },\n\n            after: pipe => {\n                actionClass.actionResult = pipe.result;\n\n                server.express.all(actionPath, (req, res) => {\n                    actionClass.render(req, res);\n                    pipe.next();\n                });\n\n                actionClass.execute();\n            }\n        };\n\n    return (target, key?) => {\n        if (key) {\n            new ActionDecorator(target, key, callbacks.before(RouteType.Action), callbacks.after)\n        } else {\n            new ControllerDecorator(target, callbacks.before(RouteType.Controller))\n        }\n    }\n}\n"],"sourceRoot":"/source/"}