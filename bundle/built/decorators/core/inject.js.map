{"version":3,"sources":["decorators/core/inject.ts"],"names":["Inject"],"mappings":";;AAAA,IAAA,aAAA,GAAA,OAAA,CAA8F,eAAe,CAAC,CAAA;AAK9G,SAAA,MAAA,CAAuB,MAAW,EAAE,WAA0B,EAAE,cAAuB,EAAA;AACnFA,QAAIA,cAAcA,GAAGA,OAAOA,CAACA,WAAWA,CAACA,aAAaA,EAAEA,MAAMA,EAAEA,WAAWA,CAACA,CAACA;AAE7EA,QAAIA,cAAcA,EAAEA;AAChBA,YAAIA,IAAIA,GAA4BA,OAAOA,CAACA,WAAWA,CAACA,aAAAA,CAAAA,cAAcA,EAAEA,MAAMA,EAAEA,WAAWA,CAACA,IAAIA,EAAEA,CAACA;AAEnGA,YAAIA,CAACA,IAAIA,CAACA;AACNA,gBAAIA,EAAEA,aAAAA,CAAAA,kBAAkBA,CAACA,MAAMA;AAC/BA,kBAAMA,EAAEA,OAAOA,CAACA,WAAWA,CAACA,mBAAmBA,EAAEA,MAAMA,EAAEA,WAAWA,CAACA,CAACA,cAAcA,CAACA;AACrFA,0BAAcA,EAAEA,cAAcA;SACjCA,CAACA,CAACA;AAEHA,eAAOA,CAACA,cAAcA,CAACA,aAAAA,CAAAA,cAAcA,EAAEA,IAAIA,EAAEA,MAAMA,EAAEA,WAAWA,CAACA,CAACA;KACrEA,MAAMA;AACHA,YAAIA,MAAMA,GAAGA,SAATA,MAAMA,GAAGA;AACT,gBAAI,CAAC,yBAAuB,WAAW,AAAE,CAAC;AAE1C,gBAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;AACV,oBAAI,CAAC,CAAC,CAAC,GAAG,IAAI,cAAc,EAAE,CAAC;aAClC;AAED,mBAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAClB,CAACA;AAGFA,YAAIA,OAAOA,MAAMA,CAACA,WAAWA,CAACA,EAAEA;AAC5BA,kBAAMA,CAACA,cAAcA,CAACA,MAAMA,EAAEA,WAAWA,EAAEA;AACvCA,mBAAGA,EAAEA,MAAMA;AACXA,0BAAUA,EAAEA,IAAIA;AAChBA,4BAAYA,EAAEA,IAAIA;aACrBA,CAACA,CAACA;SACNA;KACJA;CAEJA;AAlCe,OAAA,CAAA,MAAM,GAAA,MAkCrB,CAAA","file":"decorators/core/inject.js","sourcesContent":["import { allianceParams, allianceParamsType, allianceParamAbstract, allianceBodyParser } from './_paramTypes';\n\n/**\n * Inject (Autowired) decorator\n */\nexport function Inject(target: any, propertyKey: string|symbol, parameterIndex?: number) {\n    let injectedTarget = Reflect.getMetadata(\"design:type\", target, propertyKey);\n\n    if (parameterIndex) {\n        let args: allianceParamAbstract[] = Reflect.getMetadata(allianceParams, target, propertyKey) || [];\n\n        args.push({\n            type: allianceParamsType.Inject,\n            target: Reflect.getMetadata(\"design:paramtypes\", target, propertyKey)[parameterIndex],\n            parameterIndex: parameterIndex\n        });\n\n        Reflect.defineMetadata(allianceParams, args, target, propertyKey);\n    } else {\n        let getter = function () {\n            let k = `_allianceInjected${propertyKey}`;\n\n            if (!this[k]) {\n                this[k] = new injectedTarget();\n            }\n\n            return this[k];\n        };\n\n        // Create new property with getter and setter\n        if (delete target[propertyKey]) {\n            Object.defineProperty(target, propertyKey, {\n                get: getter,\n                enumerable: true,\n                configurable: true\n            });\n        }\n    }\n\n}\n"],"sourceRoot":"/source/"}