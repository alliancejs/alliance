// Generated by dts-bundle v0.4.3
// Dependencies for this module:
//   ../../express

declare module 'alliance/core' {
    export { Application } from 'alliance/core/decorators/core/Application';
    export { Inject } from 'alliance/core/decorators/core/Inject';
    export { Controller } from 'alliance/core/decorators/core/Controller';
    export { Route } from 'alliance/core/decorators/core/Route';
    export { AbstractController } from 'alliance/core/components/core/controller/AbstractController';
    export { Log } from 'alliance/core/components/core/debug/Log';
}

declare module 'alliance/core/decorators/core/Application' {
    export function Application(target: any): void;
}

declare module 'alliance/core/decorators/core/Inject' {
    export function Inject(target: any, key: string): void;
}

declare module 'alliance/core/decorators/core/Controller' {
    export function Controller(target: any): void;
}

declare module 'alliance/core/decorators/core/Route' {
    export enum RouteType {
        Action = 0,
        Controller = 1,
    }
    export class ActionDecorator {
        constructor(target: any, key: any, before: Function, after?: Function);
    }
    export class ControllerDecorator {
        constructor(target: any, before: Function, after?: Function);
    }
    export function Route(path: string, options?: Object): (target: any, key?: any) => void;
}

declare module 'alliance/core/components/core/controller/AbstractController' {
    import * as express from 'express';
    export abstract class AbstractController {
        template: string;
        renderVariables: Object;
        context: Object;
        app: express.Express;
        response: express.Response;
        request: express.Request;
        meta: Object;
        constructor();
        set(key: string | Object, value?: string): void;
    }
}

declare module 'alliance/core/components/core/debug/Log' {
    export class Log {
        static message(...message: any[]): void;
        static warning(...message: any[]): void;
        static error(...message: any[]): void;
        static success(...message: any[]): void;
        static event: {
            warning: string;
            error: string;
            info: string;
            request: string;
        };
    }
}

